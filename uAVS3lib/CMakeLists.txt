aux_source_directory(. DIR_UAVS3LIB_SRC)
aux_source_directory(./tools DIR_TOOL_SRC)

# check cpu
if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64" OR
   "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
  if(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
    set(UAVS3D_TARGET_CPU "x86")
  elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    set(UAVS3D_TARGET_CPU "x86_64")
  else()
    message(FATAL_ERROR
              " Unexpected pointer size ${CMAKE_SIZEOF_VOID_P} for ${CMAKE_SYSTEM_PROCESSOR}\n")
  endif()
elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i386" OR
       "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86")
  set(UAVS3D_TARGET_CPU "x86")
elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "aarch64")
  set(UAVS3D_TARGET_CPU "arm64")
elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "^arm")
  set(UAVS3D_TARGET_CPU "armv7")
else()
  message(WARNING "unsupported architecture: ${CMAKE_SYSTEM_PROCESSOR}\n")
  set(UAVS3D_TARGET_CPU "generic")
endif()

if("${UAVS3D_TARGET_CPU}" MATCHES "x86" OR
   "${UAVS3D_TARGET_CPU}" MATCHES "x86_64")
   aux_source_directory(./x86 DIR_X86_SRC)
    list(APPEND DIR_UAVS3LIB_SRC ${DIR_X86_SRC})
   IF (CC STREQUAL "icc")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -ipo -O3 -std=c99 -march=native")
    ELSE()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -O3 -std=c99 -mavx2")
    ENDIF()
elseif("${UAVS3D_TARGET_CPU}" MATCHES "arm64")
    aux_source_directory(./armv8 DIR_ARM64_SRC)
    list(APPEND DIR_UAVS3LIB_SRC ${DIR_ARM64_SRC})
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/cost_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/deblock_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/def_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/inter_pred_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/intra_pred_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/pixel_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/sao_kernel_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/trans_dct_arm64.S")
    list(APPEND DIR_UAVS3LIB_SRC "./armv8/block_arm64.S")
    IF (CC STREQUAL "icc")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -ipo -O3 -std=c99 -march=native")
    ELSE()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -O3 -std=c99")
    add_definitions(-D __armv8)
    enable_language(ASM)
    ENDIF()
endif()

if(${COMPILE_10BIT})
    add_definitions(-DCOMPILE_10BIT=1)
    message("compile 10bit")
else()
    add_definitions(-DCOMPILE_10BIT=0)
    message("compile 8bit")
endif()
   
list(APPEND DIR_UAVS3LIB_SRC ${DIR_TOOL_SRC})
add_library(uavs3e ${DIR_UAVS3LIB_SRC})

target_link_libraries(uavs3e m)
target_link_libraries(uavs3e pthread)

install(TARGETS uavs3e LIBRARY DESTINATION /usr/lib ARCHIVE DESTINATION /usr/lib)
install(FILES uAVS3lib.h DESTINATION /usr/include)
install(FILES uAVS3lib_gop.h DESTINATION /usr/include)

